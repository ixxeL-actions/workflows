---
name: Buildkit build
description: Build docker images with Buildkit
author: ixxeL
inputs:
  img-name:
    description: name of the image
    required: true
  tag:
    description: tagged name to apply to the built image
    required: true
  target-dir:
    required: false
    default: artefacts
  buildkitd-flags:
    required: false
    default: --oci-worker-no-process-sandbox
  dockerfile-frontend:
    required: false
    default: dockerfile.v0
  compression-format:
    required: false
    default: tar
  buildkit-inline-buildinfo-attrs:
    required: false
    default: true
  buildkit-inline-cache:
    required: false
    default: true
  workingdir:
    description: directory in which to find the Dockerfile
    required: false
    default: .
  github-api-auth:
    description: Authenticate to github API
    required: false
    default: false
  github-api-rest-token:
    description: Github API token
    required: false

runs:
  using: composite
  steps:
  - id: buildkit-build
    run: |
      set +e
      echo -e "${BLUE}[ STEP - BUILDING IMAGE ] > Building docker image ${{ inputs.img-name }}:${{ inputs.tag }} with Buildkit.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Buildkit version.${BLANK}"
      buildctl --version

      echo -e "${CYAN}[ INFO ] > Exporting Buildkit BUILDKITD_FLAGS --> ${{ inputs.buildkitd-flags }} ${BLANK}"
      export BUILDKITD_FLAGS=${{ inputs.buildkitd-flags }}

      mkdir -p ~/.docker
      # echo "{\"auths\":{\"https://$DST_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "$CI_REGISTRY_USER" "$CI_REGISTRY_PASSWORD" | base64 | tr -d '\n')\"}}}" > ~/.docker/config.json
      # echo "{\"auths\": {\"$CI_REGISTRY\": {\"auth\": \"$auth\"}}}" > ~/.docker/config.json

      if [[ -n ${INSECURE_REGISTRY} ]]
      then
        echo -e "${CYAN}[ INFO ] > Adding insecure registry ${INSECURE_REGISTRY}${BLANK}"
        # sed -i "s/}$/, \n\"insecure-registries\": [\"$INSECURE_REGISTRY\"]}/" ~/.docker/config.json
        echo "{\"insecure-registries\": [ \"https://$INSECURE_REGISTRY\" ]}" >> ~/.docker/config.json
        cat ~/.docker/config.json
      fi

      if [[ ${{ inputs.github-api-auth }} = true ]]
      then
        echo -e "${CYAN}[ INFO ] > Authenticating to Github API${BLANK}"
        curl -sSfL -H "Authorization: token ${{ inputs.github-api-rest-token }}" https://api.github.com
      fi

      if [[ ${{ inputs.compression-format }} = "docker-archive" ]]
      then
        echo -e "${CYAN}[ INFO ] > Using docker format build${BLANK}"
        export COMPRESSION_FORMAT=docker
      elif [[ ${{ inputs.compression-format }} = "oci-archive" ]]
      then
        echo -e "${CYAN}[ INFO ] > Using oci format build${BLANK}"
        export COMPRESSION_FORMAT=oci
      else
        echo -e "${CYAN}[ INFO ] > Using tar format build${BLANK}"
        export COMPRESSION_FORMAT=tar
      fi
      mkdir -p ${{ inputs.target-dir }}

      echo -e "${YELLOW}[ EXECUTING ] > Executing build of ${{ inputs.img-name }}:${{ inputs.tag}}.${BLANK}"
      buildctl-daemonless.sh build \
          --frontend=${{ inputs.dockerfile-frontend }} \
          --local context=${{ inputs.workingdir }} \
          --local dockerfile=${{ inputs.workingdir }} \
          --export-cache type=inline \
          --output type=${{ inputs.compression-format }},name=${{ inputs.img-name }}:${{ inputs.tag}},mode=min,dest=${{ inputs.target-dir }}/${{ inputs.img-name }}.tar

      if [[ $? = 0 ]]
      then
        size=$(du -sh ${{ inputs.target-dir }}/${{ inputs.img-name }}.tar | awk '{print $1}')
        echo -e "${GREEN}[ SUCCESS ] > Docker image ${YELLOW}${{ inputs.img-name }}:${{ inputs.tag}}${GREEN} successfully built with Buildkit. SIZE --> [ ${PURPLE}${size}${GREEN} ]${BLANK}"
      else
        echo -e "${RED}[ FAIL ] > Docker image ${{ inputs.img-name }}:${{ inputs.tag}} failed to build with Buildkit !${BLANK}"
        exit 1
      fi
      echo "IMG_TAR_PATH=${{ inputs.target-dir }}/${{ inputs.img-name }}.tar" >> buildkit-build.env
      echo "IMG_REF=${{ inputs.img-name }}:${{ inputs.tag}}" >> buildkit-build.env
      ls -la ${{ inputs.target-dir }}/
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
