---
name: Buildkit build
description: Build docker images with Buildkit
author: ixxeL
inputs:
  img-name:
    description: name of the image
    required: true
  tag:
    description: tagged name to apply to the built image
    required: true
  component:
    required: false
    default: build
  target-dir:
    required: false
    default: artefacts
  oci-worker-snapshotter:
    required: false
    default: fuse-overlayfs
  build-arg:
    description: argument=value to supply to the builder
    required: false
    default: ''
  dockerfile-frontend:
    required: false
    default: dockerfile.v0
  dockerfile-name:
    required: false
    default: Dockerfile
  compression-format:
    required: false
    default: docker-archive
  buildkit-inline-buildinfo-attrs:
    required: false
    default: true
  buildkit-inline-cache:
    required: false
    default: true
  workingdir:
    description: directory in which to find the Dockerfile
    required: false
    default: .
  github-api-auth:
    description: Authenticate to github API
    required: false
    default: false
  github-api-rest-token:
    description: Github API token
    required: false
  caching:
    description: Usin cache registry
    required: false
    default: true
  cache-registry:
    description: Cache registry
    required: false
    default: true
  push:
    description: Push img
    required: false
    default: true
  force-login:
    description: Using docker login
    required: false
    default: true
  login-binary:
    description: Using docker login
    required: false
    default: docker
  custom-login:
    description: Using docker login for specific registry
    required: false
    default: true
  login-registry-user:
    description: User for custom registry
    required: false
  login-registry-pwd:
    description: Pwd for custom registry
    required: false
  docker-hub-login:
    description: Using docker login for docker hub
    required: false
    default: true
  docker-io-user:
    description: User for docker hub
    required: false
  docker-io-pwd:
    description: Pwd for docker hub
    required: false

runs:
  using: composite
  steps:
  - id: buildkit-build
    run: |
      set +e
      echo -e "${BLUE}[ STEP - BUILDING IMAGE ] > Building docker image ${{ inputs.img-name }}:${{ inputs.tag }} with Buildkit.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Buildkit version.${BLANK}"
      buildctl --version

      function assert_result()
      {
        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > $1 success ! ${BLANK}"
        else
          echo -e "${RED}[ FAIL ] > $1 failed ! ${BLANK}"
          exit 1
        fi
      }

      who=$(whoami)
      if [[ ${who} != "root" ]]
      then
        echo -e "${CYAN}[ INFO ] > User is not root --> ${who} ${BLANK}"
        BUILDKITD_FLAGS+=" --oci-worker-no-process-sandbox"
        mkdir -p ~/.config/buildkit
        touch ~/.config/buildkit/buildkitd.toml
        BUILDKIT_CFG=~/.config/buildkit/buildkitd.toml
      else
        echo -e "${CYAN}[ INFO ] > User is Root ${BLANK}"
        mkdir -p /etc/buildkit
        touch /etc/buildkit/buildkitd.toml
        BUILDKIT_CFG=/etc/buildkit/buildkitd.toml
      fi
      BUILDKITD_FLAGS+=" --config ${BUILDKIT_CFG} --oci-worker-snapshotter=${{ inputs.oci-worker-snapshotter }}"
      export BUILDKITD_FLAGS=${BUILDKITD_FLAGS}
      echo -e "${CYAN}[ INFO ] > Displaying Buildkit BUILDKITD_FLAGS --> ${BUILDKITD_FLAGS} ${BLANK}"

      if [[ ${{ inputs.github-api-auth }} = true ]]
      then
        echo -e "${CYAN}[ INFO ] > Authenticating to Github API${BLANK}"
        curl -sSfL -H "Authorization: token ${{ inputs.github-api-rest-token }}" https://api.github.com
      fi

      if [[ ${{ inputs.compression-format }} = "docker-archive" ]]
      then
        echo -e "${CYAN}[ INFO ] > Using docker format build${BLANK}"
        export COMPRESSION_FORMAT=docker
      elif [[ ${{ inputs.compression-format }} = "oci-archive" ]]
      then
        echo -e "${CYAN}[ INFO ] > Using oci format build${BLANK}"
        export COMPRESSION_FORMAT=oci
      else
        echo -e "${CYAN}[ INFO ] > Using tar format build${BLANK}"
        export COMPRESSION_FORMAT=tar
      fi
      mkdir -p ${{ inputs.target-dir }}

      BUILD_ARG=CREATION_DATE=$(TZ='Europe/Paris' date -Iseconds)
      BUILD_ARG+="|${{ inputs.build-arg }}"
      if [ "$BUILD_ARG" ]
      then
        [[ ! "$BUILD_ARG" =~ ^\|.+ ]] || BUILD_ARG="${BUILD_ARG:1}"
        full_str=${BUILD_ARG//|/ --opt build-arg:}
        BUILD_ARGS="--opt build-arg:$full_str"
        echo -e "${CYAN}[ INFO ] > Build args are the following${BLANK}"
        echo "${BUILD_ARGS}"
      fi

      if [[ "${{ inputs.custom-login }}" = true || "${{ inputs.docker-hub-login }}" = true ]]
      then
        if [[ ${{ inputs.login-binary }} = "docker" ]]
        then
          export DOCKER_CONFIG=/root/.docker
          mkdir -p ${DOCKER_CONFIG}
          echo -e "${CYAN}[ INFO ] > Using docker cli emulated podman${BLANK}"
          ARGS="--tls-verify=false"
          # export CONFIG_FILE="/run/containers/0/auth.json"
          export CONFIG_FILE="/root/.docker/config.json"
        else
          export CONFIG_FILE="~/.docker/config.json"
        fi
        if [[ ${{ inputs.custom-login }} = true ]]
        then
          echo -e "${CYAN}[ INFO ] > Login to ${{ inputs.login-registry }} as user ${{ inputs.login-registry-user }}${BLANK}"
          ${{ inputs.login-binary }} login ${{ inputs.login-registry }} -u ${{ inputs.login-registry-user }} -p ${{ inputs.login-registry-pwd }} ${ARGS}
          assert_result "Login"
        fi
        if [[ ${{ inputs.docker-hub-login }} = true ]]
        then
          echo -e "${CYAN}[ INFO ] > Login to docker.io as user ${{ inputs.docker-io-user }}${BLANK}"
          ${{ inputs.login-binary }} login docker.io -u ${{ inputs.docker-io-user }} -p ${{ inputs.docker-io-pwd }} ${ARGS}
          assert_result "Login"
          cat ${CONFIG_FILE}  | jq '(.auths |= (. + {"https://index.docker.io/v1/":."docker.io"}|del(."docker.io")))' | sponge ${CONFIG_FILE}
        fi
        # ln "${CONFIG_FILE}" ${DOCKER_CONFIG}
        cat "${CONFIG_FILE}" | jq -C
      fi

      CACHE_REGISTRY=$(echo ${{ inputs.cache-registry }} | sed 's/\/$//')
      if [[ ${{ inputs.caching }} = true ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > Executing build of ${PURPLE}${{ inputs.img-name }}:${{ inputs.tag}}${YELLOW}${BLANK}"
        if [[ ${{ inputs.push }} = true ]]
        then
          echo -e "${CYAN}[ INFO ] > Push mode on. Pushing image ${PURPLE}${{ inputs.img-name }}:${{ inputs.tag}}${YELLOW} to registry ${{ inputs.cache-registry }}${BLANK}"
          buildctl-daemonless.sh build \
                                --import-cache type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ inputs.component }}-cache \
                                --export-cache type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ inputs.component }}-cache,mode=max,push=true \
                                --frontend=${{ inputs.dockerfile-frontend }} \
                                --local context=${{ inputs.workingdir }} \
                                --local dockerfile=${{ inputs.workingdir }} \
                                --opt filename=./${{ inputs.dockerfile-name }} \
                                --output type=image,\"name=${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ inputs.tag}},${{ inputs.cache-registry }}/${{ inputs.img-name }}:latest\",push=${{ inputs.push }} \
                                --metadata-file metadata.json \
                                ${BUILD_ARGS}
          assert_result "${{ inputs.img-name }}:${{ inputs.tag}} build"
        else
          echo -e "${CYAN}[ INFO ] > Tarball mode on. Compressing image ${PURPLE}${{ inputs.img-name }}:${{ inputs.tag}}${YELLOW} to tarball ${{ inputs.target-dir }}/${{ inputs.img-name }}.tar${BLANK}"
          buildctl-daemonless.sh build \
                                --import-cache type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ inputs.component }}-cache \
                                --export-cache type=registry,ref=${{ inputs.cache-registry }}/${{ inputs.img-name }}:${{ inputs.component }}-cache,mode=max,push=true \
                                --frontend=${{ inputs.dockerfile-frontend }} \
                                --local context=${{ inputs.workingdir }} \
                                --local dockerfile=${{ inputs.workingdir }} \
                                --opt filename=./${{ inputs.dockerfile-name }} \
                                --output type=${COMPRESSION_FORMAT},name=${{ inputs.img-name }}:${{ inputs.tag}},mode=min,dest=${{ inputs.target-dir }}/${{ inputs.img-name }}.tar \
                                --metadata-file metadata.json \
                                ${BUILD_ARGS}
          assert_result "${{ inputs.img-name }}:${{ inputs.tag}} build"
        fi
      else
        echo -e "${CYAN}[ INFO ] > No caching option activated, no push mode activated${BLANK}"
        echo -e "${YELLOW}[ EXECUTING ] > Executing build of ${{ inputs.img-name }}:${{ inputs.tag}} with buildkit${BLANK}"
        buildctl-daemonless.sh build \
                              --frontend=${{ inputs.dockerfile-frontend }} \
                              --local context=${{ inputs.workingdir }} \
                              --local dockerfile=${{ inputs.workingdir }} \
                              --opt filename=./${{ inputs.dockerfile-name }} \
                              --export-cache type=inline \
                              --output type=${COMPRESSION_FORMAT},name=${{ inputs.img-name }}:${{ inputs.tag}},mode=min,dest=${{ inputs.target-dir }}/${{ inputs.img-name }}.tar \
                              --metadata-file metadata.json \
                              ${BUILD_ARGS}
      fi
      cat metadata.json | jq -C
      rm metadata.json
      if [[ $? = 0 ]]
      then
        size=$(du -sh ${{ inputs.target-dir }}/${{ inputs.img-name }}.tar | awk '{print $1}')
        echo -e "${GREEN}[ SUCCESS ] > Docker image ${YELLOW}${{ inputs.img-name }}:${{ inputs.tag}}${GREEN} successfully built with Buildkit. SIZE --> [ ${PURPLE}${size}${GREEN} ]${BLANK}"
      else
        echo -e "${RED}[ FAIL ] > Docker image ${{ inputs.img-name }}:${{ inputs.tag}} failed to build with Buildkit !${BLANK}"
        exit 1
      fi
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
