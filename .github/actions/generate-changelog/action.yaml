---
name: Changelog generate
description: Generating CHANGELOG.md
author: fspiers
inputs:
  workingdir:
    description: directory in which to find the Dockerfile
    required: false
    default: .
  release-name:
    description: Name of the release
    required: false
    default: New release

runs:
  using: composite
  steps:
  - id: generate-changelog
    run: |
      set +e
      echo -e "${BLUE}[ STEP - GENERATE CHANGELOG] > Generating CHANGELOG.md file${BLANK}"
      echo -e "${CYAN}[ INFO ] > Git version.${BLANK}"
      git version

      LAST_TAG=$(git describe --abbrev=0 --tags)
      echo -e "${CYAN}[ INFO ] > Last tag is ${YELLOW}${LAST_TAG}${BLANK}"

      commit_messages=$(git log --no-merges --pretty=format:"%s" --grep="^\(feat\|fix\|chore\|docs\|style\|refactor\|test\|perf\|build\|ci\|revert\)" ${LAST_TAG}..HEAD)

      if [[ -f ${{ inputs.workingdir }}/CHANGELOG.md ]]
      then
        echo -e "${CYAN}[ INFO ] > Updating current CHANGELOG.md${BLANK}"
        echo >> ${{ inputs.workingdir }}/CHANGELOG.md
        echo "## Release ${{ inputs.release-name }}" >> ${{ inputs.workingdir }}/CHANGELOG.md
      else
        echo -e "${CYAN}[ INFO ] > Initializing new CHANGELOG.md${BLANK}"
        echo "# CHANGELOG" > ${{ inputs.workingdir }}/CHANGELOG.md
        echo >> ${{ inputs.workingdir }}/CHANGELOG.md
      fi

      while IFS= read -r line; do
        commit_type=$(echo "$line" | cut -d':' -f1)
        commit_message=$(echo "$line" | cut -d':' -f2-)

        commit_type_header=$(echo "$commit_type" | awk '{print toupper($0)}')

        echo "#### $commit_type_header" >> ${{ inputs.workingdir }}/CHANGELOG.md
        echo "- $commit_message" >> ${{ inputs.workingdir }}/CHANGELOG.md
        echo >> ${{ inputs.workingdir }}/CHANGELOG.md
      done <<< "$commit_messages"

      if [[ $? = 0 ]]
      then
        echo -e "${GREEN}[ SUCCESS ] > Changelog generated with success${BLANK}"
        exit 0
      else
        echo -e "${RED}[ FAIL ] > Changelog generation failed!${BLANK}"
        exit 1
      fi
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m