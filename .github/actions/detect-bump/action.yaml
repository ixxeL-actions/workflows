---
name: Detect bump version
description: Detecting bump increment
author: fspiers
inputs:
  search-type:
    description: lookup type to use
    required: false
    default: last-release  
  windows-time:
    description: time in second to look for last commits
    required: false
    default: 60
outputs:
  BUMP_KIND:
    description: kind of bump to proceed
    value: ${{ steps.detect-bump.outputs.BUMP_KIND }}

runs:
  using: composite
  steps:
  - id: detect-bump
    run: |
      set +e
      echo -e "${BLUE}[ STEP - Detect bump ] > Detecting bump version${BLANK}"

      if [[ "${{ inputs.search-type }}" = "source" ]]
      then
        REGEX="^(.+/feat/.+|.+/feature/.+)$"
        echo -e "${CYAN}[ INFO ] > Using source search type${BLANK}"
        git pull origin main
        git log --all --oneline --simplify-by-decoration -5 --source
        ORIGIN_BRANCH=$(git log --all --oneline --simplify-by-decoration -1 --source | awk -F' ' '{print $2}')

        if [[ ${ORIGIN_BRANCH} =~ ${REGEX} ]]
        then
          echo -e "${CYAN}[ INFO ] > Feature detected in origin branch ${ORIGIN_BRANCH}, proceeding ${PURPLE}minor${CYAN} version bump${BLANK}"
          echo "BUMP_KIND=minor" >> $GITHUB_OUTPUT
          exit 0
        fi
      elif [[ "${{ inputs.search-type }}" = "last-release" ]]
      then
        REGEX="^(feat\s*(\(.+\))?\s*:.+|feature\s*(\(.+\))?\s*:.+)$"

        mapfile -t commit_messages < <(git log --format=%s -20)
        filtered_commits=()

        for commit_message in "${commit_messages[@]}"
        do
          filtered_commits+=("$commit_message")
          RELEASE_REGEX="\s*:package: CI release.+"
          if [[ $commit_message =~ ${RELEASE_REGEX} ]]; then
            break
          fi
        done

        for filtered_commit in "${filtered_commits[@]}"
        do
          echo -e "${CYAN}[ INFO ] > Git commit is ${PURPLE}$filtered_commit${BLANK}"
          if [[ ${filtered_commit} =~ ${REGEX} ]]
          then
            echo -e "${CYAN}[ INFO ] > Feature detected in commit, proceeding ${PURPLE}minor${CYAN} version bump${BLANK}"
            echo "BUMP_KIND=minor" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
      else
        REGEX="^(feat\s*(\(.+\))?\s*:.+|feature\s*(\(.+\))?\s*:.+)$"
        echo -e "${CYAN}[ INFO ] > Using time search type${BLANK}"
        current_time=$(date +%s)
        checkpoint=$((current_time - "${{ inputs.windows-time }}"))

        mapfile -t commit_messages < <(git log --format=%s --since="$checkpoint" --source --oneline --simplify-by-decoration)

        for commit_message in "${commit_messages[@]}"
        do
          echo -e "${CYAN}[ INFO ] > Git msg is ${PURPLE}$commit_message${BLANK}"
          if [[ ${commit_message} =~ ${REGEX} ]]
          then
            echo -e "${CYAN}[ INFO ] > Feature detected in commit, proceeding ${PURPLE}minor${CYAN} version bump${BLANK}"
            echo "BUMP_KIND=minor" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
      fi
      echo -e "${CYAN}[ INFO ] > Proceeding ${PURPLE}fix${CYAN}  version bump${BLANK}"
      echo "BUMP_KIND=fix" >> $GITHUB_OUTPUT
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
