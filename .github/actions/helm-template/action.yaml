---
name: Helm template
description: Template Helm chart with helm CLI
author: ixxeL
inputs:
  workingdir:
    description: directory in which to find the Dockerfile
    required: false
    default: .
  strict:
    description: use strict mode
    required: false
    default: true
  values-file:
    description: name of the values.yaml file
    required: false
    default: values.yaml
  repo-name:
    description: name of the values.yaml file
    required: false
    default: temp-repo
  repo-user:
    description: name of the values.yaml file
    required: false
    default: temp-repo
outputs:
  CHART_NAME:
    description: chart name
    value: ${{ steps.helm-lint.outputs.CHART_NAME }}
  CHART_VERSION:
    description: chart version
    value: ${{ steps.helm-lint.outputs.CHART_VERSION }}
  CHART_APP_VERSION:
    description: chart appVersion
    value: ${{ steps.helm-lint.outputs.CHART_APP_VERSION }}

runs:
  using: composite
  steps:
  - id: helm-template
    run: |
      set +e
      echo -e "${BLUE}[ STEP - Helm-chart templating ] > Templating Helm chart.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Helm version.${BLANK}"
      helm version --short

      if [[ ${ADD_REPO} = "true" ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > Adding repo named ${{ inputs.repo-name }} from ${HELM_REPO_URL}.${BLANK}"
        helm repo add ${{ inputs.repo-name }} ${HELM_REPO_URL} --force-update \
                                                        --pass-credentials \
                                                        --username=${HELM_REPO_USER} \
                                                        --password=${HELM_REPO_PWD} \
                                                        --insecure-skip-tls-verify
        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Helm repo added successfully !${BLANK}"
          WORKINGDIR=${{ inputs.repo-name }}/${CHART_NAME}
        else
          echo -e "${RED}[ ERROR ] > Helm repo failed to be added.${BLANK}"
          exit 1
        fi
      fi


      echo -e "${YELLOW}[ EXECUTING ] > Checking helm chart ${{ inputs.workingdir }}.${BLANK}"
      if [[ -d ${{ inputs.workingdir }} ]]
      then
        echo -e "${GREEN}[ CHECK SUCCESS ] > Directory exists, proceeding linting.${BLANK}"
      else
        echo -e "${RED}[ CHECK ERROR ] > Directory doesn't exist, canceling linting.${BLANK}"
        exit 1
      fi
      if [[ -f ${{ inputs.workingdir }}/Chart.yaml ]]
      then
        echo -e "${CYAN}[ INFO ] > Chart.yaml file detected. Here is the file${BLANK}"
        yq e ${{ inputs.workingdir }}/Chart.yaml -C
        CHART_NAME=$(yq e '.name' ${{ inputs.workingdir }}/Chart.yaml)
        CHART_VERSION=$(yq e '.version' ${{ inputs.workingdir }}/Chart.yaml)
        CHART_APP_VERSION=$(yq e '.appVersion' ${{ inputs.workingdir }}/Chart.yaml)
        echo -e "${CYAN}[ INFO ] > The chart [[ ${YELLOW}${CHART_NAME}${CYAN} ]] has version --> [[ ${YELLOW}${CHART_VERSION}${CYAN} ]] and appVersion --> [[ ${YELLOW}${CHART_APP_VERSION}${CYAN} ]]${BLANK}"
      else
        echo -e "${PURPLE}[ WARNING ] > Chart.yaml file NOT detected.${BLANK}"
      fi
      echo -e "${YELLOW}[ EXECUTING ] > CHecking Helm linting on chart ${CHART_NAME}.${BLANK}"
      helm lint ${{ inputs.workingdir }} --with-subcharts \
                              --values=${{ inputs.workingdir }}/${{ inputs.values-file }} \
                              --strict=${{ inputs.strict }}
      if [[ $? = 0 ]]
      then
        echo -e "${GREEN}[ CHECK SUCCESS ] > Helm Lint succeeded without any error.${BLANK}"
        echo "CHART_NAME=$CHART_NAME" >> $GITHUB_OUTPUT
        echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT
        echo "CHART_APP_VERSION=$CHART_APP_VERSION" >> $GITHUB_OUTPUT
      else
        echo -e "${PURPLE}[ CHECK ERROR ] > Helm Lint didn't succeed, please review your helm chart.${BLANK}"
        exit 1
      fi

      if [ "${SET}" ]
      then
        [[ ! "$SET" =~ ^\|.+ ]] || SET="${SET:1}"
        full_str=${SET//|/ --set }
        SETTINGS="$SETTINGS --set $full_str"
        echo -e "${CYAN}[ INFO ] > Set values for helm template are the following${BLANK}"
        echo $SETTINGS
      fi

      if [[ ${ADD_REPO} = "false" ]]
      then
        if [[ -f ${WORKINGDIR}/Chart.yaml ]]
        then
          echo -e "${CYAN}[ INFO ] > Chart.yaml file detected.${BLANK}"
          echo -e "${CYAN}[ INFO ] > The chart [[ ${YELLOW}${CHART_NAME}${CYAN} ]] has version --> [[ ${YELLOW}${CHART_VERSION}${CYAN} ]] and appVersion --> [[ ${YELLOW}${CHART_APP_VERSION}${CYAN} ]]${BLANK}"
        else
          echo -e "${PURPLE}[ WARNING ] > Chart.yaml file NOT detected.${BLANK}"
        fi
      fi

      echo -e "${YELLOW}[ EXECUTING ] > Executing helm chart ${CHART_NAME} templating.${BLANK}"
      if [[ ! -d ${OUTPUT_DIRECTORY} ]]; then mkdir -p ${OUTPUT_DIRECTORY}; fi
      if [[ ${STDOUT_MODE} = "true" ]]
      then
        helm template ${CHART_NAME} ${WORKINGDIR} --values="${VALUES_FILE}" ${SETTINGS} > ${OUTPUT_DIRECTORY}/${OUTPUT_FILE}
      elif [[ ${STDOUT_MODE} = "false" ]]
      then
        helm template ${CHART_NAME} ${WORKINGDIR} --values="${VALUES_FILE}" ${SETTINGS} --output-dir ${OUTPUT_DIRECTORY}
      fi

      if [[ $? = 0 ]]
      then
        if [[ ${STDOUT_MODE} = "true" ]]
        then
          TPL_CHART_YAML=${OUTPUT_DIRECTORY}/${OUTPUT_FILE}
          echo "TPL_CHART_YAML=${TPL_CHART_YAML}" >> helm-template.env
          if [[ "${DISPLAY}" = "true" ]]
          then
            echo -e "${CYAN}[ INFO ] > Displaying templated result.${BLANK}"
            yq e -C ${OUTPUT_DIRECTORY}/${OUTPUT_FILE}
          fi
        fi
        echo -e "${GREEN}[ CHECK SUCCESS ] > Helm templating succeeded without any error.${BLANK}"
      else
        echo -e "${RED}[ CHECK ERROR ] > Helm templating didn't succeed !${BLANK}"
        exit 1
      fi

    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
