---
name: Checkov scan
description: Scanning files with Checkov
author: ixxeL
inputs:
  artefact:
    description: Name of the file or directory to scan
    required: true
  compact:
    required: false
    default: true
  quiet:
    required: false
    default: false
  no-guide:
    required: false
    default: false
  format:
    required: false
    default: cli
  threshold:
    required: false
    default: critical
  soft-fail:
    required: false
    default: true
  gate:
    required: false
    default: '50'
  skip-path:
    required: false
  workingdir:
    required: false
    default: .

runs:
  using: composite
  steps:
  - id: checkov-scan
    run: |
      set +e
      echo -e "${BLUE}[ STEP - STATIC ANALYSIS ] > Analyzing with Checkov.${BLANK}"
      echo -e "${CYAN}[ INFO ] > Checkov version.${BLANK}"
      checkov --version

      OPTIONS=""
      if [ ${{ inputs.quiet }} = true ]
      then
        echo -e "${CYAN}[ INFO ] > Displaying errors only.${BLANK}"
        OPTIONS+=" --quiet"
      fi

      if [[ ${{ inputs.no-guide }} = true ]]
      then
        echo -e "${CYAN}[ INFO ] > Displaying without guide.${BLANK}"
        OPTIONS+=" --no-guide"
      fi
      if [[ ${{ inputs.compact }} = true ]]
      then
        echo -e "${CYAN}[ INFO ] > Displaying with compact mode.${BLANK}"
        OPTIONS+=" --compact"
      fi
      if [[ ${{ inputs.soft-fail }} = true ]]
      then
        echo -e "${CYAN}[ INFO ] > Using soft-fail mode.${BLANK}"
        OPTIONS+=" --soft-fail"
      fi
      if [[ -n "${{ inputs.skip-path }}" ]]
      then
          SKIP_PATH=${{ inputs.skip-path }}
          [[ ! "$SKIP_PATH" =~ ^\|.+ ]] || SKIP_PATH="${SKIP_PATH:1}"
          full_str=${SKIP_PATH//|/ --build-arg }
          SKIP_PATHS="--skip-path=$full_str"
          echo -e "${CYAN}[ INFO ] > Skip paths are the following${BLANK}"
          echo "${SKIP_PATHS}"
          OPTIONS+=" ${SKIP_PATHS}"
      fi

      echo -e "${YELLOW}[ EXECUTING ] > Executing static code analyzis on ${{ inputs.workingdir }}/${{ inputs.artefact }}${BLANK}"
      if [[ -d ${{ inputs.workingdir }}/${{ inputs.artefact }} ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > Analyzing directory ${{ inputs.workingdir }}/${{ inputs.artefact }}.${BLANK}"
        result=$(checkov -d ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=junitxml ${OPTIONS})
        json_result=$(checkov -d ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=json ${OPTIONS})
        if [[ "${{ inputs.format }}" != "json" ]]
        then
          script -q -e -c "checkov -d ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=${{ inputs.format }} ${OPTIONS}"
        else
          checkov -d ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=${{ inputs.format }} ${OPTIONS} | jq -C
        fi
      elif [[ -f ${{ inputs.workingdir }}/${{ inputs.artefact }} ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > Analyzing file ${{ inputs.workingdir }}/${{ inputs.artefact }}.${BLANK}"
        result=$(checkov -f ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=junitxml ${OPTIONS})
        json_result=$(checkov -f ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=json ${OPTIONS})
        if [[ "${{ inputs.format }}" != "json" ]]
        then
          script -q -e -c "checkov -f ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=${{ inputs.format }} ${OPTIONS}"
        else
          checkov -f ${{ inputs.workingdir }}/${{ inputs.artefact }} --output=${{ inputs.format }} ${OPTIONS} | jq -C
        fi
      else
        echo -e "${RED}[ FAIL ] > Parameter '{{ inputs.artefact }}' --> ${{ inputs.artefact }} not valid !${BLANK}"
        exit 1
      fi
      EXIT_CODE="${PIPESTATUS[0]}"
      echo "${result}" > checkov-test.xml

      if [[ ${EXIT_CODE} -ne 0 ]]
      then
        echo -e "${RED}[ FAIL ] > Checkov scan failed !${BLANK}"
      else
        echo -e "${GREEN}[ SUCCESS ] > Checkov scan succeeded !${BLANK}"
      fi

      if [[ ${{ inputs.gate }} -ne 0 ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > Evaluating gate --> Threshold set at ${{ inputs.gate }}%${BLANK}"
        passed=$(echo ${json_result} | jq '.summary.passed')
        failed=$(echo ${json_result} | jq '.summary.failed')
        total=$(echo | awk "{print ${passed}+${failed}}")
        ratio=$(echo | awk "{print ${passed}/${total}}")
        SCAN_RATIO=$(echo | awk "{print ${ratio}*100}")
        echo -e "${CYAN}[ INFO ] > Result scanning is ${SCAN_RATIO}%${BLANK}"

        if [[ $(echo "${SCAN_RATIO} > ${{ inputs.gate }}" | bc) -ne 0 ]]
        then
          echo -e "${GREEN}[ SUCCESS ] > Checkov gate succeeded ! ${{ inputs.gate }}% threshold =< ${SCAN_RATIO}% result ${BLANK}"
        else
          echo -e "${RED}[ FAIL ] > Checkov gate failed ! ${{ inputs.gate }}% threshold > ${SCAN_RATIO}% result ${BLANK}"
          exit 1
        fi
      else
        echo -e "${YELLOW}[ EXECUTING ] > Skipping gate evaluation.${BLANK}"
      fi
      exit ${EXIT_CODE}
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
