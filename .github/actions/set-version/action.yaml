---
name: Set project version
description: Determine the actual version tag
author: ixxeL
inputs:
  tls-verify:
    description: Check certificates
    required: false
    default: false
  component:
    required: true
outputs:
  PROJECT_VERSION:
    description: version tag
    value: ${{ steps.set-version.outputs.PROJECT_VERSION }}
  PROJECT_SHORT_VERSION:
    description: short version tag
    value: ${{ steps.set-version.outputs.PROJECT_SHORT_VERSION }}

runs:
  using: composite
  steps:
  - id: set-version
    run: |
      set +e
      if [[ "$GITHUB_REF_NAME" =~ ^(release\/)([0-9]+\.[0-9]+)$ ]]
      then
        echo -e "${YELLOW}[ EXECUTING ] > setting up git config to mail ${GITLAB_USER_EMAIL} and username ${GITHUB_ACTOR}.${BLANK}"
        git config --global --add safe.directory $GITHUB_WORKSPACE
        # git config --global user.email "${GITLAB_USER_EMAIL}"
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global http.sslVerify ${{ inputs.tls-verify }}
        git config --list

        git fetch origin main:main
        git fetch --tags --force origin main:main
        # git fetch origin $GITHUB_REF_NAME:$GITHUB_REF_NAME
        # git fetch --tags --force origin $GITHUB_REF_NAME:$GITHUB_REF_NAME
        # echo -e "${CYAN}[ INFO ] Checkout track ${PURPLE}main${BLANK}"
        # git branch --set-upstream-to origin/main
        # # git checkout --track origin/main
        # echo -e "${CYAN}[ INFO ] Checkout track ${PURPLE}$GITHUB_REF_NAME${BLANK}"
        # git checkout --track origin/$GITHUB_REF_NAME
        # # git branch --set-upstream-to origin/$GITHUB_REF_NAME

        echo -e "${CYAN}[ INFO ] List of tags${BLANK}"
        git tag --list
        # Defaulting to maj.min.0
        proj_version="v${BASH_REMATCH[2]}.0"
        proj_short_version=$proj_version

        # Looking for previous tag
        echo -e "${CYAN}[ INFO ] Git merge-base with ${PURPLE}main${CYAN} and ${PURPLE}$GITHUB_REF_NAME ${CYAN}${BLANK}"
        git merge-base main $GITHUB_REF_NAME
        branch_tail=$(git merge-base main $GITHUB_REF_NAME)
        last_tag=''

        # For each commit of the branch
        echo -e "${CYAN}[ INFO ] Analyzing each commit for tag${BLANK}"
        git cherry $branch_tail -v

        cherry=$(git cherry $branch_tail | cut -d' ' -f2)
        cherry="$branch_tail $cherry"
        COMPONENT=${{ inputs.component }}
        for commit in $cherry
        do
          tmp_tag=$(git tag --points-at $commit)
          if [ "$tmp_tag" != '' ]
          then
            echo -e "${CYAN}[ INFO ] Tmp tag not empty${BLANK}"
            if [ "$GITHUB_SHA" != "$commit" ]
            then
              if ! [[ "$tmp_tag" =~ ^${COMPONENT}-v?([0-9]+\.[0-9]+\.)([0-9]+)$ ]]
              then
                last_tag="$tmp_tag"
                echo -e "${CYAN}[ INFO ] Tag ${YELLOW}$last_tag${CYAN} found at commit ${YELLOW}$commit${BLANK}"
              fi
            else
              echo -e "${RED}[ ERROR ] Your current commit ${PURPLE}$GITHUB_SHA${RED} is actually your last tag ${PURPLE}$tmp_tag${RED}. Cannot perform tag on a commit already tagged.${BLANK}"
              exit 1
            fi
          fi
        done

        if [ "$last_tag" != '' ]
        then
          # Found previous tag, increment patch digit
          if ! [[ "$last_tag" =~ ^v?([0-9]+\.[0-9]+\.)([0-9]+)$ ]]
          then
            echo -e "${RED}[ ERROR ] > Last tag ${PURPLE}$last_tag${RED} is not in Semantic Versioning (vMaj.Min.Patch ie: v1.0.0). Please perform manual correction${BLANK}"
            exit 1
          else
            proj_version="${COMPONENT}-v${BASH_REMATCH[1]}$(( ${BASH_REMATCH[2]} + 1 ))"
            proj_short_version=$proj_version
          fi
        fi
      else
        GITHUB_SHORT_SHA=${GITHUB_SHA:0:7}
        proj_version="$GITHUB_SHA"
        proj_short_version="$GITHUB_SHORT_SHA"
      fi
      echo -e "${CYAN}[ INFO ] Using ${PURPLE}$proj_version${CYAN} for project version${BLANK}"
      echo -e "${CYAN}[ INFO ] Using ${PURPLE}$proj_short_version${CYAN} for short project version${BLANK}"
      echo "PROJECT_VERSION=$proj_version" >> $GITHUB_OUTPUT
      echo "PROJECT_SHORT_VERSION=$proj_short_version" >> $GITHUB_OUTPUT
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m
