---
name: Grype scan
description: Scanning docker image with Grype
author: ixxeL
inputs:
  git-token:
    required: true
  tag-msg:
    required: false
    default: 'ci'
  tag-value:
    required: true
  git-workdir:
    required: false
    default: .
  tls-verify:
    required: false
    default: false
  push-option:
    required: false
    default: ci.skip

runs:
  using: composite
  steps:
  - id: grype-scan
    run: |
      set +e
      REPO_URL=${{ inputs.repo-url }}
      echo -e "${BLUE}[ STEP - TAG GIT REPO ] > Tagging git repo ${REPO_URL}${BLANK}"
      echo -e "${CYAN}[ INFO ] > Git version.${BLANK}"
      git version

      [[ $REPO_URL == *.git ]] || REPO_URL+=.git
      regex_pattern="((git@|https:\/\/).+[:\/]*.*\.git)"

      if ! [[ ${REPO_URL} =~ $regex_pattern ]]
      then
        echo -e "${RED}[ ERROR ] Git URL does not match '$regex_pattern'${BLANK}"
        exit 1
      fi

      if [[ -z ${{ inputs.git-token }} ]]
      then
        echo -e "${CYAN}[ INFO ] > No token provided, pushing without authentication.${BLANK}"
        PUSH_URL=${REPO_URL}
      else
        echo -e "${CYAN}[ INFO ] > Token has been provided, pushing with authentication.${BLANK}"
        PUSH_URL=$(echo "${REPO_URL}" | sed -e 's|\(https://\)\([^/]*@\)*|\1github-ci-token:'${{ inputs.git-token }}'@|')
      fi
      echo -e "${CYAN}[ INFO ] > Reworked URL --> ${PUSH_URL}.${BLANK}"

      TAG_MSG=${{ inputs.tag-msg }}
      if [ "${TAG_MSG}" == '' ]; then TAG_MSG="Release: ${{ inputs.tag-value }}"; fi

      echo -e "${YELLOW}[ EXECUTING ] > setting up git config to mail ${GITLAB_USER_EMAIL} and username ${GITHUB_ACTOR}.${BLANK}"
      git config --global --add safe.directory "$(realpath "${{ inputs.git-workdir }}")"
      # git config --global user.email "${GITLAB_USER_EMAIL}"
      git config --global user.name "${GITHUB_ACTOR}"
      git config --global http.sslVerify ${{ inputs.tls-verify }}
      git config -C ${{ inputs.git-workdir }} --list

      echo -e "${YELLOW}[ EXECUTING ] > Showing repo information.${BLANK}"
      echo -e "${CYAN}[ INFO ] > git status.${BLANK}"
      git -C ${{ inputs.git-workdir }} -c color.status=always status
      echo -e "${CYAN}[ INFO ] > git diff.${BLANK}"
      git -C ${{ inputs.git-workdir }} diff --color=always
      echo -e "${CYAN}[ INFO ] > git branch.${BLANK}"
      git -C ${{ inputs.git-workdir }} branch
      echo -e "${CYAN}[ INFO ] > git origin.${BLANK}"
      git -C ${{ inputs.git-workdir }} remote show origin

      echo -e "${YELLOW}[ EXECUTING ] > tag and push to destination ${PUSH_URL}${BLANK}"
      git -C ${{ inputs.git-workdir }} tag -a ${{ inputs.tag-value }} -m "${TAG_MSG}"
      if [ $? -eq 0 ]
      then
        echo -e "${GREEN}[ SUCCESS ] New tag added to origin: ${{ inputs.tag-value }}${BLANK}"
      else
        echo -e "${RED}[ ERROR ] Could not add tag${BLANK}"
        exit 1
      fi
      git -C ${{ inputs.git-workdir }} push $PUSH_URL ${{ inputs.tag-value }} --push-option ${PUSH_OPTION}

      if [ $? -eq 0 ]
      then
        echo -e "${GREEN}[ SUCCESS ] New tag added to origin: ${{ inputs.tag-value }}${BLANK}"
        echo "NEW_TAG=${TAG_VALUE}" >> git-tag.env
        exit 0
      else
        echo -e "${RED}[ ERROR ] Could not add tag${BLANK}"
        exit 1
      fi
    shell: bash
    env:
      RED: \033[1;31m
      GREEN: \033[1;32m
      YELLOW: \033[1;33m
      BLUE: \033[1;34m
      PURPLE: \033[1;35m
      CYAN: \033[1;36m
      BLANK: \033[0m